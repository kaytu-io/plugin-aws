// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.12.4
// source: plugin/proto/server.proto

package golang

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric []*Datapoint `protobuf:"bytes,1,rep,name=metric,proto3" json:"metric,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{0}
}

func (x *Metric) GetMetric() []*Datapoint {
	if x != nil {
		return x.Metric
	}
	return nil
}

type VolumeMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics map[string]*Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VolumeMetrics) Reset() {
	*x = VolumeMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeMetrics) ProtoMessage() {}

func (x *VolumeMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeMetrics.ProtoReflect.Descriptor instead.
func (*VolumeMetrics) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{1}
}

func (x *VolumeMetrics) GetMetrics() map[string]*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type EC2Placement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenancy          string `protobuf:"bytes,1,opt,name=tenancy,proto3" json:"tenancy,omitempty"`
	AvailabilityZone string `protobuf:"bytes,2,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	HashedHostId     string `protobuf:"bytes,3,opt,name=hashed_host_id,json=hashedHostId,proto3" json:"hashed_host_id,omitempty"`
}

func (x *EC2Placement) Reset() {
	*x = EC2Placement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2Placement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2Placement) ProtoMessage() {}

func (x *EC2Placement) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2Placement.ProtoReflect.Descriptor instead.
func (*EC2Placement) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{2}
}

func (x *EC2Placement) GetTenancy() string {
	if x != nil {
		return x.Tenancy
	}
	return ""
}

func (x *EC2Placement) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *EC2Placement) GetHashedHostId() string {
	if x != nil {
		return x.HashedHostId
	}
	return ""
}

type EC2Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashedInstanceId  string                `protobuf:"bytes,1,opt,name=hashed_instance_id,json=hashedInstanceId,proto3" json:"hashed_instance_id,omitempty"`
	State             string                `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	InstanceType      string                `protobuf:"bytes,3,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	Platform          string                `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
	ThreadsPerCore    int32                 `protobuf:"varint,5,opt,name=threads_per_core,json=threadsPerCore,proto3" json:"threads_per_core,omitempty"`
	CoreCount         int32                 `protobuf:"varint,6,opt,name=core_count,json=coreCount,proto3" json:"core_count,omitempty"`
	EbsOptimized      bool                  `protobuf:"varint,7,opt,name=ebs_optimized,json=ebsOptimized,proto3" json:"ebs_optimized,omitempty"`
	InstanceLifecycle string                `protobuf:"bytes,8,opt,name=instance_lifecycle,json=instanceLifecycle,proto3" json:"instance_lifecycle,omitempty"`
	Monitoring        *wrappers.StringValue `protobuf:"bytes,9,opt,name=monitoring,proto3" json:"monitoring,omitempty"`
	Placement         *EC2Placement         `protobuf:"bytes,10,opt,name=placement,proto3" json:"placement,omitempty"`
	UsageOperation    string                `protobuf:"bytes,11,opt,name=usage_operation,json=usageOperation,proto3" json:"usage_operation,omitempty"`
	Tenancy           string                `protobuf:"bytes,12,opt,name=tenancy,proto3" json:"tenancy,omitempty"`
}

func (x *EC2Instance) Reset() {
	*x = EC2Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2Instance) ProtoMessage() {}

func (x *EC2Instance) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2Instance.ProtoReflect.Descriptor instead.
func (*EC2Instance) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{3}
}

func (x *EC2Instance) GetHashedInstanceId() string {
	if x != nil {
		return x.HashedInstanceId
	}
	return ""
}

func (x *EC2Instance) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *EC2Instance) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *EC2Instance) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *EC2Instance) GetThreadsPerCore() int32 {
	if x != nil {
		return x.ThreadsPerCore
	}
	return 0
}

func (x *EC2Instance) GetCoreCount() int32 {
	if x != nil {
		return x.CoreCount
	}
	return 0
}

func (x *EC2Instance) GetEbsOptimized() bool {
	if x != nil {
		return x.EbsOptimized
	}
	return false
}

func (x *EC2Instance) GetInstanceLifecycle() string {
	if x != nil {
		return x.InstanceLifecycle
	}
	return ""
}

func (x *EC2Instance) GetMonitoring() *wrappers.StringValue {
	if x != nil {
		return x.Monitoring
	}
	return nil
}

func (x *EC2Instance) GetPlacement() *EC2Placement {
	if x != nil {
		return x.Placement
	}
	return nil
}

func (x *EC2Instance) GetUsageOperation() string {
	if x != nil {
		return x.UsageOperation
	}
	return ""
}

func (x *EC2Instance) GetTenancy() string {
	if x != nil {
		return x.Tenancy
	}
	return ""
}

type EC2Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashedVolumeId   string                `protobuf:"bytes,1,opt,name=hashed_volume_id,json=hashedVolumeId,proto3" json:"hashed_volume_id,omitempty"`
	VolumeType       string                `protobuf:"bytes,2,opt,name=volume_type,json=volumeType,proto3" json:"volume_type,omitempty"`
	Size             *wrappers.Int32Value  `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Iops             *wrappers.Int32Value  `protobuf:"bytes,4,opt,name=iops,proto3" json:"iops,omitempty"`
	AvailabilityZone *wrappers.StringValue `protobuf:"bytes,5,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	Throughput       *wrappers.DoubleValue `protobuf:"bytes,6,opt,name=throughput,proto3" json:"throughput,omitempty"`
}

func (x *EC2Volume) Reset() {
	*x = EC2Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2Volume) ProtoMessage() {}

func (x *EC2Volume) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2Volume.ProtoReflect.Descriptor instead.
func (*EC2Volume) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{4}
}

func (x *EC2Volume) GetHashedVolumeId() string {
	if x != nil {
		return x.HashedVolumeId
	}
	return ""
}

func (x *EC2Volume) GetVolumeType() string {
	if x != nil {
		return x.VolumeType
	}
	return ""
}

func (x *EC2Volume) GetSize() *wrappers.Int32Value {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *EC2Volume) GetIops() *wrappers.Int32Value {
	if x != nil {
		return x.Iops
	}
	return nil
}

func (x *EC2Volume) GetAvailabilityZone() *wrappers.StringValue {
	if x != nil {
		return x.AvailabilityZone
	}
	return nil
}

func (x *EC2Volume) GetThroughput() *wrappers.DoubleValue {
	if x != nil {
		return x.Throughput
	}
	return nil
}

type EC2InstanceOptimizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      *wrappers.StringValue            `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	CliVersion     *wrappers.StringValue            `protobuf:"bytes,2,opt,name=cli_version,json=cliVersion,proto3" json:"cli_version,omitempty"`
	Identification map[string]string                `protobuf:"bytes,3,rep,name=identification,proto3" json:"identification,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Instance       *EC2Instance                     `protobuf:"bytes,4,opt,name=instance,proto3" json:"instance,omitempty"`
	Volumes        []*EC2Volume                     `protobuf:"bytes,5,rep,name=volumes,proto3" json:"volumes,omitempty"`
	VolumeCount    int64                            `protobuf:"varint,6,opt,name=volume_count,json=volumeCount,proto3" json:"volume_count,omitempty"`
	Metrics        map[string]*Metric               `protobuf:"bytes,7,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VolumeMetrics  map[string]*VolumeMetrics        `protobuf:"bytes,8,rep,name=volume_metrics,json=volumeMetrics,proto3" json:"volume_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Region         string                           `protobuf:"bytes,9,opt,name=region,proto3" json:"region,omitempty"`
	Preferences    map[string]*wrappers.StringValue `protobuf:"bytes,10,rep,name=preferences,proto3" json:"preferences,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Loading        bool                             `protobuf:"varint,11,opt,name=loading,proto3" json:"loading,omitempty"`
}

func (x *EC2InstanceOptimizationRequest) Reset() {
	*x = EC2InstanceOptimizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2InstanceOptimizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2InstanceOptimizationRequest) ProtoMessage() {}

func (x *EC2InstanceOptimizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2InstanceOptimizationRequest.ProtoReflect.Descriptor instead.
func (*EC2InstanceOptimizationRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{5}
}

func (x *EC2InstanceOptimizationRequest) GetRequestId() *wrappers.StringValue {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *EC2InstanceOptimizationRequest) GetCliVersion() *wrappers.StringValue {
	if x != nil {
		return x.CliVersion
	}
	return nil
}

func (x *EC2InstanceOptimizationRequest) GetIdentification() map[string]string {
	if x != nil {
		return x.Identification
	}
	return nil
}

func (x *EC2InstanceOptimizationRequest) GetInstance() *EC2Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *EC2InstanceOptimizationRequest) GetVolumes() []*EC2Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *EC2InstanceOptimizationRequest) GetVolumeCount() int64 {
	if x != nil {
		return x.VolumeCount
	}
	return 0
}

func (x *EC2InstanceOptimizationRequest) GetMetrics() map[string]*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *EC2InstanceOptimizationRequest) GetVolumeMetrics() map[string]*VolumeMetrics {
	if x != nil {
		return x.VolumeMetrics
	}
	return nil
}

func (x *EC2InstanceOptimizationRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *EC2InstanceOptimizationRequest) GetPreferences() map[string]*wrappers.StringValue {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *EC2InstanceOptimizationRequest) GetLoading() bool {
	if x != nil {
		return x.Loading
	}
	return false
}

// Responses
type Datapoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Average     *wrappers.DoubleValue `protobuf:"bytes,1,opt,name=average,proto3" json:"average,omitempty"`
	Maximum     *wrappers.DoubleValue `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
	Minimum     *wrappers.DoubleValue `protobuf:"bytes,3,opt,name=minimum,proto3" json:"minimum,omitempty"`
	SampleCount *wrappers.DoubleValue `protobuf:"bytes,4,opt,name=sample_count,json=sampleCount,proto3" json:"sample_count,omitempty"`
	Sum         *wrappers.DoubleValue `protobuf:"bytes,5,opt,name=sum,proto3" json:"sum,omitempty"`
	Timestamp   *timestamp.Timestamp  `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Datapoint) Reset() {
	*x = Datapoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datapoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datapoint) ProtoMessage() {}

func (x *Datapoint) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datapoint.ProtoReflect.Descriptor instead.
func (*Datapoint) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{6}
}

func (x *Datapoint) GetAverage() *wrappers.DoubleValue {
	if x != nil {
		return x.Average
	}
	return nil
}

func (x *Datapoint) GetMaximum() *wrappers.DoubleValue {
	if x != nil {
		return x.Maximum
	}
	return nil
}

func (x *Datapoint) GetMinimum() *wrappers.DoubleValue {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *Datapoint) GetSampleCount() *wrappers.DoubleValue {
	if x != nil {
		return x.SampleCount
	}
	return nil
}

func (x *Datapoint) GetSum() *wrappers.DoubleValue {
	if x != nil {
		return x.Sum
	}
	return nil
}

func (x *Datapoint) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Usage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg  *wrappers.DoubleValue `protobuf:"bytes,1,opt,name=avg,proto3" json:"avg,omitempty"`
	Max  *wrappers.DoubleValue `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	Min  *wrappers.DoubleValue `protobuf:"bytes,3,opt,name=min,proto3" json:"min,omitempty"`
	Last *Datapoint            `protobuf:"bytes,4,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *Usage) Reset() {
	*x = Usage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Usage) ProtoMessage() {}

func (x *Usage) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Usage.ProtoReflect.Descriptor instead.
func (*Usage) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{7}
}

func (x *Usage) GetAvg() *wrappers.DoubleValue {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *Usage) GetMax() *wrappers.DoubleValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Usage) GetMin() *wrappers.DoubleValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Usage) GetLast() *Datapoint {
	if x != nil {
		return x.Last
	}
	return nil
}

type RightsizingEC2Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType      string             `protobuf:"bytes,1,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	Region            string             `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Cost              float64            `protobuf:"fixed64,3,opt,name=cost,proto3" json:"cost,omitempty"`
	CostComponents    map[string]float64 `protobuf:"bytes,4,rep,name=cost_components,json=costComponents,proto3" json:"cost_components,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Processor         string             `protobuf:"bytes,5,opt,name=processor,proto3" json:"processor,omitempty"`
	Architecture      string             `protobuf:"bytes,6,opt,name=architecture,proto3" json:"architecture,omitempty"`
	Vcpu              int64              `protobuf:"varint,7,opt,name=vcpu,proto3" json:"vcpu,omitempty"`
	Memory            float64            `protobuf:"fixed64,8,opt,name=memory,proto3" json:"memory,omitempty"`
	EbsBandwidth      string             `protobuf:"bytes,9,opt,name=ebs_bandwidth,json=ebsBandwidth,proto3" json:"ebs_bandwidth,omitempty"`
	EbsIops           string             `protobuf:"bytes,10,opt,name=ebs_iops,json=ebsIops,proto3" json:"ebs_iops,omitempty"`
	NetworkThroughput string             `protobuf:"bytes,11,opt,name=network_throughput,json=networkThroughput,proto3" json:"network_throughput,omitempty"`
	EnaSupported      string             `protobuf:"bytes,12,opt,name=ena_supported,json=enaSupported,proto3" json:"ena_supported,omitempty"`
	LicensePrice      float64            `protobuf:"fixed64,13,opt,name=license_price,json=licensePrice,proto3" json:"license_price,omitempty"`
	License           string             `protobuf:"bytes,14,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *RightsizingEC2Instance) Reset() {
	*x = RightsizingEC2Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RightsizingEC2Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RightsizingEC2Instance) ProtoMessage() {}

func (x *RightsizingEC2Instance) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RightsizingEC2Instance.ProtoReflect.Descriptor instead.
func (*RightsizingEC2Instance) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{8}
}

func (x *RightsizingEC2Instance) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *RightsizingEC2Instance) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RightsizingEC2Instance) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *RightsizingEC2Instance) GetCostComponents() map[string]float64 {
	if x != nil {
		return x.CostComponents
	}
	return nil
}

func (x *RightsizingEC2Instance) GetProcessor() string {
	if x != nil {
		return x.Processor
	}
	return ""
}

func (x *RightsizingEC2Instance) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *RightsizingEC2Instance) GetVcpu() int64 {
	if x != nil {
		return x.Vcpu
	}
	return 0
}

func (x *RightsizingEC2Instance) GetMemory() float64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *RightsizingEC2Instance) GetEbsBandwidth() string {
	if x != nil {
		return x.EbsBandwidth
	}
	return ""
}

func (x *RightsizingEC2Instance) GetEbsIops() string {
	if x != nil {
		return x.EbsIops
	}
	return ""
}

func (x *RightsizingEC2Instance) GetNetworkThroughput() string {
	if x != nil {
		return x.NetworkThroughput
	}
	return ""
}

func (x *RightsizingEC2Instance) GetEnaSupported() string {
	if x != nil {
		return x.EnaSupported
	}
	return ""
}

func (x *RightsizingEC2Instance) GetLicensePrice() float64 {
	if x != nil {
		return x.LicensePrice
	}
	return 0
}

func (x *RightsizingEC2Instance) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

type RightSizingRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current           *RightsizingEC2Instance `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Recommended       *RightsizingEC2Instance `protobuf:"bytes,2,opt,name=recommended,proto3" json:"recommended,omitempty"`
	Vcpu              *Usage                  `protobuf:"bytes,3,opt,name=vcpu,proto3" json:"vcpu,omitempty"`
	Memory            *Usage                  `protobuf:"bytes,4,opt,name=memory,proto3" json:"memory,omitempty"`
	EbsBandwidth      *Usage                  `protobuf:"bytes,5,opt,name=ebs_bandwidth,json=ebsBandwidth,proto3" json:"ebs_bandwidth,omitempty"`
	EbsIops           *Usage                  `protobuf:"bytes,6,opt,name=ebs_iops,json=ebsIops,proto3" json:"ebs_iops,omitempty"`
	NetworkThroughput *Usage                  `protobuf:"bytes,7,opt,name=network_throughput,json=networkThroughput,proto3" json:"network_throughput,omitempty"`
	Description       string                  `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *RightSizingRecommendation) Reset() {
	*x = RightSizingRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RightSizingRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RightSizingRecommendation) ProtoMessage() {}

func (x *RightSizingRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RightSizingRecommendation.ProtoReflect.Descriptor instead.
func (*RightSizingRecommendation) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{9}
}

func (x *RightSizingRecommendation) GetCurrent() *RightsizingEC2Instance {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *RightSizingRecommendation) GetRecommended() *RightsizingEC2Instance {
	if x != nil {
		return x.Recommended
	}
	return nil
}

func (x *RightSizingRecommendation) GetVcpu() *Usage {
	if x != nil {
		return x.Vcpu
	}
	return nil
}

func (x *RightSizingRecommendation) GetMemory() *Usage {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *RightSizingRecommendation) GetEbsBandwidth() *Usage {
	if x != nil {
		return x.EbsBandwidth
	}
	return nil
}

func (x *RightSizingRecommendation) GetEbsIops() *Usage {
	if x != nil {
		return x.EbsIops
	}
	return nil
}

func (x *RightSizingRecommendation) GetNetworkThroughput() *Usage {
	if x != nil {
		return x.NetworkThroughput
	}
	return nil
}

func (x *RightSizingRecommendation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type RightsizingEBSVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tier                  string                `protobuf:"bytes,1,opt,name=tier,proto3" json:"tier,omitempty"`
	VolumeSize            *wrappers.Int32Value  `protobuf:"bytes,2,opt,name=volume_size,json=volumeSize,proto3" json:"volume_size,omitempty"`
	BaselineIops          int32                 `protobuf:"varint,3,opt,name=baseline_iops,json=baselineIops,proto3" json:"baseline_iops,omitempty"`
	ProvisionedIops       *wrappers.Int32Value  `protobuf:"bytes,4,opt,name=provisioned_iops,json=provisionedIops,proto3" json:"provisioned_iops,omitempty"`
	BaselineThroughput    float64               `protobuf:"fixed64,5,opt,name=baseline_throughput,json=baselineThroughput,proto3" json:"baseline_throughput,omitempty"`
	ProvisionedThroughput *wrappers.DoubleValue `protobuf:"bytes,6,opt,name=provisioned_throughput,json=provisionedThroughput,proto3" json:"provisioned_throughput,omitempty"`
	Cost                  float64               `protobuf:"fixed64,7,opt,name=cost,proto3" json:"cost,omitempty"`
	CostComponents        map[string]float64    `protobuf:"bytes,8,rep,name=cost_components,json=costComponents,proto3" json:"cost_components,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *RightsizingEBSVolume) Reset() {
	*x = RightsizingEBSVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RightsizingEBSVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RightsizingEBSVolume) ProtoMessage() {}

func (x *RightsizingEBSVolume) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RightsizingEBSVolume.ProtoReflect.Descriptor instead.
func (*RightsizingEBSVolume) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{10}
}

func (x *RightsizingEBSVolume) GetTier() string {
	if x != nil {
		return x.Tier
	}
	return ""
}

func (x *RightsizingEBSVolume) GetVolumeSize() *wrappers.Int32Value {
	if x != nil {
		return x.VolumeSize
	}
	return nil
}

func (x *RightsizingEBSVolume) GetBaselineIops() int32 {
	if x != nil {
		return x.BaselineIops
	}
	return 0
}

func (x *RightsizingEBSVolume) GetProvisionedIops() *wrappers.Int32Value {
	if x != nil {
		return x.ProvisionedIops
	}
	return nil
}

func (x *RightsizingEBSVolume) GetBaselineThroughput() float64 {
	if x != nil {
		return x.BaselineThroughput
	}
	return 0
}

func (x *RightsizingEBSVolume) GetProvisionedThroughput() *wrappers.DoubleValue {
	if x != nil {
		return x.ProvisionedThroughput
	}
	return nil
}

func (x *RightsizingEBSVolume) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *RightsizingEBSVolume) GetCostComponents() map[string]float64 {
	if x != nil {
		return x.CostComponents
	}
	return nil
}

type EBSVolumeRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current     *RightsizingEBSVolume `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Recommended *RightsizingEBSVolume `protobuf:"bytes,2,opt,name=recommended,proto3" json:"recommended,omitempty"`
	Iops        *Usage                `protobuf:"bytes,3,opt,name=iops,proto3" json:"iops,omitempty"`
	Throughput  *Usage                `protobuf:"bytes,4,opt,name=throughput,proto3" json:"throughput,omitempty"`
	Description string                `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *EBSVolumeRecommendation) Reset() {
	*x = EBSVolumeRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EBSVolumeRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EBSVolumeRecommendation) ProtoMessage() {}

func (x *EBSVolumeRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EBSVolumeRecommendation.ProtoReflect.Descriptor instead.
func (*EBSVolumeRecommendation) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{11}
}

func (x *EBSVolumeRecommendation) GetCurrent() *RightsizingEBSVolume {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *EBSVolumeRecommendation) GetRecommended() *RightsizingEBSVolume {
	if x != nil {
		return x.Recommended
	}
	return nil
}

func (x *EBSVolumeRecommendation) GetIops() *Usage {
	if x != nil {
		return x.Iops
	}
	return nil
}

func (x *EBSVolumeRecommendation) GetThroughput() *Usage {
	if x != nil {
		return x.Throughput
	}
	return nil
}

func (x *EBSVolumeRecommendation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type EC2InstanceOptimizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RightSizing       *RightSizingRecommendation          `protobuf:"bytes,1,opt,name=right_sizing,json=rightSizing,proto3" json:"right_sizing,omitempty"`
	VolumeRightSizing map[string]*EBSVolumeRecommendation `protobuf:"bytes,2,rep,name=volume_right_sizing,json=volumeRightSizing,proto3" json:"volume_right_sizing,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EC2InstanceOptimizationResponse) Reset() {
	*x = EC2InstanceOptimizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2InstanceOptimizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2InstanceOptimizationResponse) ProtoMessage() {}

func (x *EC2InstanceOptimizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2InstanceOptimizationResponse.ProtoReflect.Descriptor instead.
func (*EC2InstanceOptimizationResponse) Descriptor() ([]byte, []int) {
	return file_plugin_proto_server_proto_rawDescGZIP(), []int{12}
}

func (x *EC2InstanceOptimizationResponse) GetRightSizing() *RightSizingRecommendation {
	if x != nil {
		return x.RightSizing
	}
	return nil
}

func (x *EC2InstanceOptimizationResponse) GetVolumeRightSizing() map[string]*EBSVolumeRecommendation {
	if x != nil {
		return x.VolumeRightSizing
	}
	return nil
}

var File_plugin_proto_server_proto protoreflect.FileDescriptor

var file_plugin_proto_server_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22,
	0xbf, 0x01, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x4f, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x1a, 0x5d, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x7b, 0x0a, 0x0c, 0x45, 0x43, 0x32, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0xf7,
	0x03, 0x0a, 0x0b, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x62, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x62, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x45,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x43,
	0x32, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x22, 0xc1, 0x02, 0x0a, 0x09, 0x45, 0x43, 0x32,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69,
	0x6f, 0x70, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x3c,
	0x0a, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x22, 0x9d, 0x09, 0x0a,
	0x1e, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x0e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x43, 0x32, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x73, 0x0a, 0x0e, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x1a, 0x41, 0x0a, 0x13, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x12, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c,
	0x0a, 0x10, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x02, 0x0a,
	0x09, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03,
	0x73, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xd1, 0x01,
	0x0a, 0x05, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77,
	0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x61, 0x73,
	0x74, 0x22, 0xdd, 0x04, 0x0a, 0x16, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e,
	0x67, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x6e, 0x0a,
	0x0f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61,
	0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45, 0x43,
	0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x63, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x76,
	0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x62, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x62, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x62, 0x73, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x62, 0x73, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e,
	0x61, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0x41,
	0x0a, 0x13, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa4, 0x04, 0x0a, 0x19, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x04, 0x76, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x76, 0x63, 0x70, 0x75, 0x12, 0x38, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x45, 0x0a, 0x0d, 0x65, 0x62, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x65, 0x62, 0x73, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x62, 0x73, 0x5f,
	0x69, 0x6f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x65, 0x62,
	0x73, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x4f, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x04, 0x0a, 0x14, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45, 0x42, 0x53, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x49, 0x6f, 0x70, 0x73,
	0x12, 0x2f, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x62,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75,
	0x74, 0x12, 0x53, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x54, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x0f, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45, 0x42, 0x53, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd1, 0x02, 0x0a, 0x17,
	0x45, 0x42, 0x53, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x45, 0x42, 0x53, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45,
	0x42, 0x53, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xf8, 0x02, 0x0a, 0x1f, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x12, 0x81, 0x01, 0x0a,
	0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x1a, 0x78, 0x0a, 0x16, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x42, 0x53, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xa1, 0x01, 0x0a, 0x0c, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x90, 0x01, 0x0a, 0x17,
	0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x61, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x38,
	0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x79,
	0x74, 0x75, 0x2d, 0x69, 0x6f, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2d, 0x61, 0x77, 0x73,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x72,
	0x63, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugin_proto_server_proto_rawDescOnce sync.Once
	file_plugin_proto_server_proto_rawDescData = file_plugin_proto_server_proto_rawDesc
)

func file_plugin_proto_server_proto_rawDescGZIP() []byte {
	file_plugin_proto_server_proto_rawDescOnce.Do(func() {
		file_plugin_proto_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugin_proto_server_proto_rawDescData)
	})
	return file_plugin_proto_server_proto_rawDescData
}

var file_plugin_proto_server_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_plugin_proto_server_proto_goTypes = []interface{}{
	(*Metric)(nil),                          // 0: pluginaws.optimization.v1.Metric
	(*VolumeMetrics)(nil),                   // 1: pluginaws.optimization.v1.VolumeMetrics
	(*EC2Placement)(nil),                    // 2: pluginaws.optimization.v1.EC2Placement
	(*EC2Instance)(nil),                     // 3: pluginaws.optimization.v1.EC2Instance
	(*EC2Volume)(nil),                       // 4: pluginaws.optimization.v1.EC2Volume
	(*EC2InstanceOptimizationRequest)(nil),  // 5: pluginaws.optimization.v1.EC2InstanceOptimizationRequest
	(*Datapoint)(nil),                       // 6: pluginaws.optimization.v1.Datapoint
	(*Usage)(nil),                           // 7: pluginaws.optimization.v1.Usage
	(*RightsizingEC2Instance)(nil),          // 8: pluginaws.optimization.v1.RightsizingEC2Instance
	(*RightSizingRecommendation)(nil),       // 9: pluginaws.optimization.v1.RightSizingRecommendation
	(*RightsizingEBSVolume)(nil),            // 10: pluginaws.optimization.v1.RightsizingEBSVolume
	(*EBSVolumeRecommendation)(nil),         // 11: pluginaws.optimization.v1.EBSVolumeRecommendation
	(*EC2InstanceOptimizationResponse)(nil), // 12: pluginaws.optimization.v1.EC2InstanceOptimizationResponse
	nil,                                     // 13: pluginaws.optimization.v1.VolumeMetrics.MetricsEntry
	nil,                                     // 14: pluginaws.optimization.v1.EC2InstanceOptimizationRequest.IdentificationEntry
	nil,                                     // 15: pluginaws.optimization.v1.EC2InstanceOptimizationRequest.MetricsEntry
	nil,                                     // 16: pluginaws.optimization.v1.EC2InstanceOptimizationRequest.VolumeMetricsEntry
	nil,                                     // 17: pluginaws.optimization.v1.EC2InstanceOptimizationRequest.PreferencesEntry
	nil,                                     // 18: pluginaws.optimization.v1.RightsizingEC2Instance.CostComponentsEntry
	nil,                                     // 19: pluginaws.optimization.v1.RightsizingEBSVolume.CostComponentsEntry
	nil,                                     // 20: pluginaws.optimization.v1.EC2InstanceOptimizationResponse.VolumeRightSizingEntry
	(*wrappers.StringValue)(nil),            // 21: google.protobuf.StringValue
	(*wrappers.Int32Value)(nil),             // 22: google.protobuf.Int32Value
	(*wrappers.DoubleValue)(nil),            // 23: google.protobuf.DoubleValue
	(*timestamp.Timestamp)(nil),             // 24: google.protobuf.Timestamp
}
var file_plugin_proto_server_proto_depIdxs = []int32{
	6,  // 0: pluginaws.optimization.v1.Metric.metric:type_name -> pluginaws.optimization.v1.Datapoint
	13, // 1: pluginaws.optimization.v1.VolumeMetrics.metrics:type_name -> pluginaws.optimization.v1.VolumeMetrics.MetricsEntry
	21, // 2: pluginaws.optimization.v1.EC2Instance.monitoring:type_name -> google.protobuf.StringValue
	2,  // 3: pluginaws.optimization.v1.EC2Instance.placement:type_name -> pluginaws.optimization.v1.EC2Placement
	22, // 4: pluginaws.optimization.v1.EC2Volume.size:type_name -> google.protobuf.Int32Value
	22, // 5: pluginaws.optimization.v1.EC2Volume.iops:type_name -> google.protobuf.Int32Value
	21, // 6: pluginaws.optimization.v1.EC2Volume.availability_zone:type_name -> google.protobuf.StringValue
	23, // 7: pluginaws.optimization.v1.EC2Volume.throughput:type_name -> google.protobuf.DoubleValue
	21, // 8: pluginaws.optimization.v1.EC2InstanceOptimizationRequest.request_id:type_name -> google.protobuf.StringValue
	21, // 9: pluginaws.optimization.v1.EC2InstanceOptimizationRequest.cli_version:type_name -> google.protobuf.StringValue
	14, // 10: pluginaws.optimization.v1.EC2InstanceOptimizationRequest.identification:type_name -> pluginaws.optimization.v1.EC2InstanceOptimizationRequest.IdentificationEntry
	3,  // 11: pluginaws.optimization.v1.EC2InstanceOptimizationRequest.instance:type_name -> pluginaws.optimization.v1.EC2Instance
	4,  // 12: pluginaws.optimization.v1.EC2InstanceOptimizationRequest.volumes:type_name -> pluginaws.optimization.v1.EC2Volume
	15, // 13: pluginaws.optimization.v1.EC2InstanceOptimizationRequest.metrics:type_name -> pluginaws.optimization.v1.EC2InstanceOptimizationRequest.MetricsEntry
	16, // 14: pluginaws.optimization.v1.EC2InstanceOptimizationRequest.volume_metrics:type_name -> pluginaws.optimization.v1.EC2InstanceOptimizationRequest.VolumeMetricsEntry
	17, // 15: pluginaws.optimization.v1.EC2InstanceOptimizationRequest.preferences:type_name -> pluginaws.optimization.v1.EC2InstanceOptimizationRequest.PreferencesEntry
	23, // 16: pluginaws.optimization.v1.Datapoint.average:type_name -> google.protobuf.DoubleValue
	23, // 17: pluginaws.optimization.v1.Datapoint.maximum:type_name -> google.protobuf.DoubleValue
	23, // 18: pluginaws.optimization.v1.Datapoint.minimum:type_name -> google.protobuf.DoubleValue
	23, // 19: pluginaws.optimization.v1.Datapoint.sample_count:type_name -> google.protobuf.DoubleValue
	23, // 20: pluginaws.optimization.v1.Datapoint.sum:type_name -> google.protobuf.DoubleValue
	24, // 21: pluginaws.optimization.v1.Datapoint.timestamp:type_name -> google.protobuf.Timestamp
	23, // 22: pluginaws.optimization.v1.Usage.avg:type_name -> google.protobuf.DoubleValue
	23, // 23: pluginaws.optimization.v1.Usage.max:type_name -> google.protobuf.DoubleValue
	23, // 24: pluginaws.optimization.v1.Usage.min:type_name -> google.protobuf.DoubleValue
	6,  // 25: pluginaws.optimization.v1.Usage.last:type_name -> pluginaws.optimization.v1.Datapoint
	18, // 26: pluginaws.optimization.v1.RightsizingEC2Instance.cost_components:type_name -> pluginaws.optimization.v1.RightsizingEC2Instance.CostComponentsEntry
	8,  // 27: pluginaws.optimization.v1.RightSizingRecommendation.current:type_name -> pluginaws.optimization.v1.RightsizingEC2Instance
	8,  // 28: pluginaws.optimization.v1.RightSizingRecommendation.recommended:type_name -> pluginaws.optimization.v1.RightsizingEC2Instance
	7,  // 29: pluginaws.optimization.v1.RightSizingRecommendation.vcpu:type_name -> pluginaws.optimization.v1.Usage
	7,  // 30: pluginaws.optimization.v1.RightSizingRecommendation.memory:type_name -> pluginaws.optimization.v1.Usage
	7,  // 31: pluginaws.optimization.v1.RightSizingRecommendation.ebs_bandwidth:type_name -> pluginaws.optimization.v1.Usage
	7,  // 32: pluginaws.optimization.v1.RightSizingRecommendation.ebs_iops:type_name -> pluginaws.optimization.v1.Usage
	7,  // 33: pluginaws.optimization.v1.RightSizingRecommendation.network_throughput:type_name -> pluginaws.optimization.v1.Usage
	22, // 34: pluginaws.optimization.v1.RightsizingEBSVolume.volume_size:type_name -> google.protobuf.Int32Value
	22, // 35: pluginaws.optimization.v1.RightsizingEBSVolume.provisioned_iops:type_name -> google.protobuf.Int32Value
	23, // 36: pluginaws.optimization.v1.RightsizingEBSVolume.provisioned_throughput:type_name -> google.protobuf.DoubleValue
	19, // 37: pluginaws.optimization.v1.RightsizingEBSVolume.cost_components:type_name -> pluginaws.optimization.v1.RightsizingEBSVolume.CostComponentsEntry
	10, // 38: pluginaws.optimization.v1.EBSVolumeRecommendation.current:type_name -> pluginaws.optimization.v1.RightsizingEBSVolume
	10, // 39: pluginaws.optimization.v1.EBSVolumeRecommendation.recommended:type_name -> pluginaws.optimization.v1.RightsizingEBSVolume
	7,  // 40: pluginaws.optimization.v1.EBSVolumeRecommendation.iops:type_name -> pluginaws.optimization.v1.Usage
	7,  // 41: pluginaws.optimization.v1.EBSVolumeRecommendation.throughput:type_name -> pluginaws.optimization.v1.Usage
	9,  // 42: pluginaws.optimization.v1.EC2InstanceOptimizationResponse.right_sizing:type_name -> pluginaws.optimization.v1.RightSizingRecommendation
	20, // 43: pluginaws.optimization.v1.EC2InstanceOptimizationResponse.volume_right_sizing:type_name -> pluginaws.optimization.v1.EC2InstanceOptimizationResponse.VolumeRightSizingEntry
	0,  // 44: pluginaws.optimization.v1.VolumeMetrics.MetricsEntry.value:type_name -> pluginaws.optimization.v1.Metric
	0,  // 45: pluginaws.optimization.v1.EC2InstanceOptimizationRequest.MetricsEntry.value:type_name -> pluginaws.optimization.v1.Metric
	1,  // 46: pluginaws.optimization.v1.EC2InstanceOptimizationRequest.VolumeMetricsEntry.value:type_name -> pluginaws.optimization.v1.VolumeMetrics
	21, // 47: pluginaws.optimization.v1.EC2InstanceOptimizationRequest.PreferencesEntry.value:type_name -> google.protobuf.StringValue
	11, // 48: pluginaws.optimization.v1.EC2InstanceOptimizationResponse.VolumeRightSizingEntry.value:type_name -> pluginaws.optimization.v1.EBSVolumeRecommendation
	5,  // 49: pluginaws.optimization.v1.Optimization.EC2InstanceOptimization:input_type -> pluginaws.optimization.v1.EC2InstanceOptimizationRequest
	12, // 50: pluginaws.optimization.v1.Optimization.EC2InstanceOptimization:output_type -> pluginaws.optimization.v1.EC2InstanceOptimizationResponse
	50, // [50:51] is the sub-list for method output_type
	49, // [49:50] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_plugin_proto_server_proto_init() }
func file_plugin_proto_server_proto_init() {
	if File_plugin_proto_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plugin_proto_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EC2Placement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EC2Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EC2Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EC2InstanceOptimizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datapoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Usage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RightsizingEC2Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RightSizingRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RightsizingEBSVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EBSVolumeRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EC2InstanceOptimizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugin_proto_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plugin_proto_server_proto_goTypes,
		DependencyIndexes: file_plugin_proto_server_proto_depIdxs,
		MessageInfos:      file_plugin_proto_server_proto_msgTypes,
	}.Build()
	File_plugin_proto_server_proto = out.File
	file_plugin_proto_server_proto_rawDesc = nil
	file_plugin_proto_server_proto_goTypes = nil
	file_plugin_proto_server_proto_depIdxs = nil
}
